/**
 * API Endpoint: Cancel Sync Operation
 * 
 * Allows cancellation of an active sync operation by updating its status
 * to 'cancelled' in the database.
 * 
 * @author Generated by AI Assistant
 * @version 1.0.0
 * @created 2024-12-19
 */

import type { NextApiRequest, NextApiResponse } from 'next';
import { productService } from '../../../../../lib/database/services/product-service';

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  // Basic admin authentication
  const authHeader = req.headers.authorization;
  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    return res.status(401).json({ error: 'Unauthorized' });
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { syncLogId } = req.query;
    
    if (!syncLogId || typeof syncLogId !== 'string') {
      return res.status(400).json({ error: 'Invalid sync log ID' });
    }

    // Check if sync log exists and is active
    const syncLog = await productService.getSyncLogById(syncLogId);
    if (!syncLog) {
      return res.status(404).json({ error: 'Sync log not found' });
    }

    // Check if sync is still active (can be cancelled)
    const activeStatuses = ['queued', 'fetching_products', 'processing_products', 'finalizing'];
    if (!activeStatuses.includes(syncLog.status)) {
      return res.status(400).json({ 
        error: 'Sync cannot be cancelled',
        reason: `Sync is already ${syncLog.status}` 
      });
    }

    // Cancel the sync
    const cancelledSyncLog = await productService.cancelSync(syncLogId);

    return res.status(200).json({
      success: true,
      message: 'Sync cancelled successfully',
      syncLog: cancelledSyncLog,
    });

  } catch (error) {
    console.error('Error cancelling sync:', error);
    return res.status(500).json({ 
      error: 'Failed to cancel sync',
      message: error instanceof Error ? error.message : 'Unknown error'
    });
  }
}
