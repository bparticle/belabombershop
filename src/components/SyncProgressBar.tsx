/**
 * Enhanced Sync Progress Bar Component
 * 
 * Displays real-time progress of sync operations with detailed status,
 * progress percentage, estimated time remaining, and current operation.
 * 
 * Features:
 * - Animated progress bar with smooth transitions
 * - Real-time status updates with icons
 * - ETA display with human-readable time format
 * - Error and warning indicators
 * - Responsive design for all screen sizes
 * - Dark/light theme support
 * 
 * @author Generated by AI Assistant
 * @version 1.0.0
 * @created 2024-12-19
 */

import React from 'react';
import { ProgressUtils, type SyncStatus } from '../lib/sync-progress';
import type { SyncLog } from '../lib/database/schema';

interface SyncProgressBarProps {
  syncLog: SyncLog | null;
  isActive: boolean;
  className?: string;
}

interface SyncProgressDisplayProps {
  syncLog: SyncLog;
}

/**
 * Main progress bar component
 */
export const SyncProgressBar: React.FC<SyncProgressBarProps> = ({ 
  syncLog, 
  isActive, 
  className = '' 
}) => {
  if (!syncLog || !isActive) {
    return null;
  }

  return (
    <div className={`bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-4 transition-colors duration-200 ${className}`}>
      <SyncProgressDisplay syncLog={syncLog} />
    </div>
  );
};

/**
 * Detailed progress display component
 */
const SyncProgressDisplay: React.FC<SyncProgressDisplayProps> = ({ syncLog }) => {
  const status = syncLog.status as SyncStatus;
  const progress = syncLog.progress || 0;
  const currentStep = syncLog.currentStep || 'Processing...';
  const estimatedTimeRemaining = syncLog.estimatedTimeRemaining || 0;
  const currentProductName = syncLog.currentProductName;
  const currentProductIndex = syncLog.currentProductIndex || 0;
  const totalProducts = syncLog.totalProducts || 0;
  
  const statusDisplay = ProgressUtils.getStatusDisplay(status);
  const isCompleted = ['success', 'error', 'partial', 'cancelled'].includes(status);
  const hasWarnings = syncLog.warnings && syncLog.warnings.length > 0;

  return (
    <div className="space-y-4">
      {/* Header with status and progress */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-3">
          <span className="text-2xl" role="img" aria-label={statusDisplay.label}>
            {statusDisplay.icon}
          </span>
          <div>
            <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
              Product Sync
            </h3>
            <p className={`text-sm font-medium ${statusDisplay.color}`}>
              {statusDisplay.label}
            </p>
          </div>
        </div>
        
        {!isCompleted && (
          <div className="text-right">
            <div className="text-2xl font-bold text-gray-900 dark:text-white">
              {progress}%
            </div>
            {estimatedTimeRemaining > 0 && (
              <div className="text-sm text-gray-500 dark:text-gray-400">
                {ProgressUtils.formatETA(estimatedTimeRemaining)}
              </div>
            )}
          </div>
        )}
      </div>

      {/* Progress bar */}
      <div className="w-full">
        <div className="flex justify-between text-sm text-gray-600 dark:text-gray-400 mb-2">
          <span>{currentStep}</span>
          {totalProducts > 0 && (
            <span>
              {currentProductIndex + 1} / {totalProducts} products
            </span>
          )}
        </div>
        
        <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-3 overflow-hidden">
          <div
            className={`h-full rounded-full transition-all duration-500 ease-out ${
              isCompleted
                ? status === 'success'
                  ? 'bg-green-500'
                  : status === 'error'
                  ? 'bg-red-500'
                  : status === 'partial'
                  ? 'bg-yellow-500'
                  : 'bg-gray-500'
                : 'bg-blue-500'
            }`}
            style={{ width: `${Math.min(100, Math.max(0, progress))}%` }}
          />
        </div>
      </div>

      {/* Current product being processed */}
      {currentProductName && !isCompleted && (
        <div className="bg-gray-50 dark:bg-gray-700/50 rounded-md p-3">
          <div className="text-sm text-gray-600 dark:text-gray-400">
            Currently processing:
          </div>
          <div className="font-medium text-gray-900 dark:text-white truncate">
            {currentProductName}
          </div>
        </div>
      )}

      {/* Success message for completed syncs */}
      {isCompleted && status === 'success' && (
        <div className="bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-md p-3">
          <div className="flex items-center space-x-2">
            <span className="text-green-600 dark:text-green-400">‚úÖ</span>
            <div className="text-sm text-green-800 dark:text-green-200 font-medium">
              Sync completed successfully! This message will close automatically.
            </div>
          </div>
        </div>
      )}

      {/* Error message for failed syncs */}
      {isCompleted && status === 'error' && (
        <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-md p-3">
          <div className="flex items-center space-x-2">
            <span className="text-red-600 dark:text-red-400">‚ùå</span>
            <div className="text-sm text-red-800 dark:text-red-200 font-medium">
              Sync failed. Check the error details below.
            </div>
          </div>
        </div>
      )}

      {/* Partial success message */}
      {isCompleted && status === 'partial' && (
        <div className="bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-md p-3">
          <div className="flex items-center space-x-2">
            <span className="text-yellow-600 dark:text-yellow-400">‚ö†Ô∏è</span>
            <div className="text-sm text-yellow-800 dark:text-yellow-200 font-medium">
              Sync completed with warnings. Check the details below.
            </div>
          </div>
        </div>
      )}

      {/* Cancelled message */}
      {isCompleted && status === 'cancelled' && (
        <div className="bg-gray-50 dark:bg-gray-900/20 border border-gray-200 dark:border-gray-800 rounded-md p-3">
          <div className="flex items-center space-x-2">
            <span className="text-gray-600 dark:text-gray-400">üö´</span>
            <div className="text-sm text-gray-800 dark:text-gray-200 font-medium">
              Sync was cancelled. You can start a new sync when ready.
            </div>
          </div>
        </div>
      )}

      {/* Statistics */}
      <SyncStatistics syncLog={syncLog} />

      {/* Warnings and errors */}
      {hasWarnings && (
        <SyncWarnings warnings={JSON.parse(syncLog.warnings || '[]')} />
      )}

      {syncLog.errorMessage && (
        <SyncError errorMessage={syncLog.errorMessage} />
      )}
    </div>
  );
};

/**
 * Statistics component
 */
const SyncStatistics: React.FC<{ syncLog: SyncLog }> = ({ syncLog }) => {
  const stats = [
    { label: 'Products Processed', value: syncLog.productsProcessed || 0, color: 'text-blue-600 dark:text-blue-400' },
    { label: 'Created', value: syncLog.productsCreated || 0, color: 'text-green-600 dark:text-green-400' },
    { label: 'Updated', value: syncLog.productsUpdated || 0, color: 'text-blue-600 dark:text-blue-400' },
    { label: 'Deleted', value: syncLog.productsDeleted || 0, color: 'text-red-600 dark:text-red-400' },
  ];

  const variantStats = [
    { label: 'Variants Processed', value: syncLog.variantsProcessed || 0 },
    { label: 'Created', value: syncLog.variantsCreated || 0 },
    { label: 'Updated', value: syncLog.variantsUpdated || 0 },
    { label: 'Deleted', value: syncLog.variantsDeleted || 0 },
  ];

  return (
    <div className="grid grid-cols-2 gap-4">
      <div>
        <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
          Products
        </h4>
        <div className="space-y-1">
          {stats.map((stat) => (
            <div key={stat.label} className="flex justify-between text-sm">
              <span className="text-gray-600 dark:text-gray-400">{stat.label}:</span>
              <span className={stat.color || 'text-gray-900 dark:text-white'}>
                {stat.value}
              </span>
            </div>
          ))}
        </div>
      </div>
      
      <div>
        <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
          Variants
        </h4>
        <div className="space-y-1">
          {variantStats.map((stat) => (
            <div key={stat.label} className="flex justify-between text-sm">
              <span className="text-gray-600 dark:text-gray-400">{stat.label}:</span>
              <span className="text-gray-900 dark:text-white">{stat.value}</span>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

/**
 * Warnings component
 */
const SyncWarnings: React.FC<{ warnings: string[] }> = ({ warnings }) => {
  if (!warnings || warnings.length === 0) return null;

  return (
    <div className="bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-md p-3">
      <div className="flex items-start space-x-2">
        <span className="text-yellow-600 dark:text-yellow-400 mt-0.5">‚ö†Ô∏è</span>
        <div className="flex-1">
          <h4 className="text-sm font-medium text-yellow-800 dark:text-yellow-300">
            Warnings ({warnings.length})
          </h4>
          <ul className="mt-1 text-sm text-yellow-700 dark:text-yellow-400 space-y-1">
            {warnings.slice(0, 3).map((warning, index) => (
              <li key={index} className="break-words">
                {warning}
              </li>
            ))}
            {warnings.length > 3 && (
              <li className="text-xs text-yellow-600 dark:text-yellow-500">
                ... and {warnings.length - 3} more warnings
              </li>
            )}
          </ul>
        </div>
      </div>
    </div>
  );
};

/**
 * Error component
 */
const SyncError: React.FC<{ errorMessage: string }> = ({ errorMessage }) => {
  return (
    <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-md p-3">
      <div className="flex items-start space-x-2">
        <span className="text-red-600 dark:text-red-400 mt-0.5">‚ùå</span>
        <div className="flex-1">
          <h4 className="text-sm font-medium text-red-800 dark:text-red-300">
            Error
          </h4>
          <p className="mt-1 text-sm text-red-700 dark:text-red-400 break-words">
            {errorMessage}
          </p>
        </div>
      </div>
    </div>
  );
};

export default SyncProgressBar;
