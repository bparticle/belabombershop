/**
 * Sync Progress Tracking Utilities
 * 
 * This module provides type-safe utilities for tracking and reporting
 * progress during product synchronization operations. It supports
 * real-time progress updates, estimated time remaining calculations,
 * and structured logging.
 * 
 * @author Generated by AI Assistant
 * @version 1.0.0
 * @created 2024-12-19
 */

import type { SyncLog, NewSyncLog } from './database/schema';

/**
 * Detailed sync status values with clear progression
 */
export type SyncStatus = 
  | 'queued'              // Sync has been requested but not started
  | 'fetching_products'   // Fetching products from Printful API
  | 'processing_products' // Processing individual products and variants
  | 'finalizing'          // Cleanup and final statistics
  | 'success'             // Completed successfully
  | 'error'               // Failed with errors
  | 'partial'             // Completed with some errors
  | 'cancelled';          // Cancelled by user or system

/**
 * Enhanced sync log with progress tracking capabilities
 */
export interface EnhancedSyncLog extends SyncLog {
  currentStep: string | null;
  progress: number | null;
  totalProducts: number | null;
  currentProductIndex: number | null;
  currentProductName: string | null;
  estimatedTimeRemaining: number | null;
  warnings: string | null;
  lastUpdated: Date | null;
}

/**
 * Progress update data structure
 */
export interface SyncProgressUpdate {
  syncLogId: string;
  status?: SyncStatus;
  currentStep?: string;
  progress?: number; // 0-100
  totalProducts?: number;
  currentProductIndex?: number;
  currentProductName?: string;
  estimatedTimeRemaining?: number;
  productsProcessed?: number;
  productsCreated?: number;
  productsUpdated?: number;
  productsDeleted?: number;
  variantsProcessed?: number;
  variantsCreated?: number;
  variantsUpdated?: number;
  variantsDeleted?: number;
  warnings?: string[];
  errorMessage?: string;
}

/**
 * Progress tracker class for managing sync progress state
 */
export class SyncProgressTracker {
  private syncLogId: string;
  private startTime: number;
  private totalProducts: number = 0;
  private processedProducts: number = 0;
  private estimatedDurationPerProduct: number = 0;
  private warnings: string[] = [];

  constructor(syncLogId: string) {
    this.syncLogId = syncLogId;
    this.startTime = Date.now();
  }

  /**
   * Initialize the tracker with total product count
   */
  initialize(totalProducts: number): SyncProgressUpdate {
    this.totalProducts = totalProducts;
    return {
      syncLogId: this.syncLogId,
      status: 'fetching_products',
      currentStep: `Preparing to sync ${totalProducts} products`,
      progress: 0,
      totalProducts,
      currentProductIndex: 0,
    };
  }

  /**
   * Update progress when starting to process a product
   */
  startProduct(productIndex: number, productName: string): SyncProgressUpdate {
    this.processedProducts = productIndex;
    const progress = this.totalProducts > 0 ? Math.round((productIndex / this.totalProducts) * 100) : 0;
    const eta = this.calculateETA();

    return {
      syncLogId: this.syncLogId,
      status: 'processing_products',
      currentStep: `Processing product ${productIndex + 1} of ${this.totalProducts}`,
      progress,
      currentProductIndex: productIndex,
      currentProductName: productName,
      estimatedTimeRemaining: eta,
    };
  }

  /**
   * Update statistics after processing a product
   */
  completeProduct(stats: {
    created?: boolean;
    updated?: boolean;
    variantsCreated?: number;
    variantsUpdated?: number;
  }): SyncProgressUpdate {
    const update: SyncProgressUpdate = {
      syncLogId: this.syncLogId,
    };

    if (stats.created) {
      update.productsCreated = (update.productsCreated || 0) + 1;
    }
    if (stats.updated) {
      update.productsUpdated = (update.productsUpdated || 0) + 1;
    }
    if (stats.variantsCreated) {
      update.variantsCreated = (update.variantsCreated || 0) + stats.variantsCreated;
    }
    if (stats.variantsUpdated) {
      update.variantsUpdated = (update.variantsUpdated || 0) + stats.variantsUpdated;
    }

    update.productsProcessed = this.processedProducts + 1;
    
    // Update estimated duration per product for better ETA calculation
    if (this.processedProducts > 0) {
      const elapsed = Date.now() - this.startTime;
      this.estimatedDurationPerProduct = elapsed / this.processedProducts;
    }

    return update;
  }

  /**
   * Add a warning message
   */
  addWarning(message: string): void {
    this.warnings.push(message);
  }

  /**
   * Get current warnings
   */
  getWarnings(): string[] {
    return [...this.warnings];
  }

  /**
   * Create final completion update
   */
  complete(status: 'success' | 'partial' | 'error', errorMessage?: string): SyncProgressUpdate {
    const duration = Date.now() - this.startTime;
    
    return {
      syncLogId: this.syncLogId,
      status,
      currentStep: status === 'success' 
        ? 'Sync completed successfully' 
        : status === 'partial'
        ? 'Sync completed with warnings'
        : 'Sync failed',
      progress: 100,
      estimatedTimeRemaining: 0,
      warnings: this.warnings.length > 0 ? this.warnings : undefined,
      errorMessage,
    };
  }

  /**
   * Calculate estimated time remaining
   */
  private calculateETA(): number {
    if (this.estimatedDurationPerProduct === 0 || this.processedProducts === 0) {
      return 0;
    }

    const remainingProducts = this.totalProducts - this.processedProducts;
    return Math.round(remainingProducts * this.estimatedDurationPerProduct);
  }
}

/**
 * Utility functions for progress display
 */
export const ProgressUtils = {
  /**
   * Format duration in human-readable format
   */
  formatDuration(milliseconds: number): string {
    if (milliseconds < 1000) return 'Less than a second';
    
    const seconds = Math.floor(milliseconds / 1000);
    const minutes = Math.floor(seconds / 60);
    const hours = Math.floor(minutes / 60);

    if (hours > 0) {
      return `${hours}h ${minutes % 60}m ${seconds % 60}s`;
    } else if (minutes > 0) {
      return `${minutes}m ${seconds % 60}s`;
    } else {
      return `${seconds}s`;
    }
  },

  /**
   * Format estimated time remaining
   */
  formatETA(milliseconds: number): string {
    if (milliseconds <= 0) return '';
    
    const seconds = Math.floor(milliseconds / 1000);
    const minutes = Math.floor(seconds / 60);
    
    if (minutes > 0) {
      return `~${minutes}m ${seconds % 60}s remaining`;
    } else {
      return `~${seconds}s remaining`;
    }
  },

  /**
   * Get status display information
   */
  getStatusDisplay(status: SyncStatus): { label: string; color: string; icon: string } {
    switch (status) {
      case 'queued':
        return { label: 'Queued', color: 'text-gray-600', icon: '‚è≥' };
      case 'fetching_products':
        return { label: 'Fetching Products', color: 'text-blue-600', icon: 'üì•' };
      case 'processing_products':
        return { label: 'Processing', color: 'text-blue-600', icon: '‚öôÔ∏è' };
      case 'finalizing':
        return { label: 'Finalizing', color: 'text-blue-600', icon: 'üîÑ' };
      case 'success':
        return { label: 'Completed', color: 'text-green-600', icon: '‚úÖ' };
      case 'error':
        return { label: 'Failed', color: 'text-red-600', icon: '‚ùå' };
      case 'partial':
        return { label: 'Completed with warnings', color: 'text-yellow-600', icon: '‚ö†Ô∏è' };
      case 'cancelled':
        return { label: 'Cancelled', color: 'text-gray-600', icon: 'üö´' };
      default:
        return { label: 'Unknown', color: 'text-gray-600', icon: '‚ùì' };
    }
  }
};

/**
 * Default progress update values for creating new sync logs
 */
export const DEFAULT_SYNC_PROGRESS: Partial<NewSyncLog> = {
  status: 'queued',
  currentStep: 'Sync queued for processing',
  progress: 0,
  totalProducts: 0,
  currentProductIndex: 0,
  currentProductName: null,
  estimatedTimeRemaining: null,
  productsProcessed: 0,
  productsCreated: 0,
  productsUpdated: 0,
  productsDeleted: 0,
  variantsProcessed: 0,
  variantsCreated: 0,
  variantsUpdated: 0,
  variantsDeleted: 0,
  warnings: null,
  errorMessage: null,
};
